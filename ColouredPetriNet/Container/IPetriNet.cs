using System;
using System.Collections.Generic;

namespace PetriNet
{
    public interface IPetriNet
    {
        bool isStateExist(int id);
        bool isStateExist<T>(int id);
        bool isTransitionExist(int id);
        bool isTransitionExist<T>(int id);
        bool isMarkerExist(int id);
        bool isMarkerExist<T>(int id);
        bool isStateExist();
        bool isStateExist<T>();
        bool isTransitionExist();
        bool isTransitionExist<T>();
        bool isMarkerExist();
        bool isMarkerExist<T>();
        int addState<T>(T value);
        int addTransition<T>(T value);
        int addMarker<T>(int state_id, T value);
        bool addStateToTransitionLink<StateType, TransitionType>(int state_id, int transition_id);
        bool addTransitionToStateLink<TransitionType, StateType>(int transition_id, int state_id);
        bool removeStateToTransitionLink<StateType, TransitionType>(int state_id, int transition_id);
        bool removeTransitionToStateLink<TransitionType, StateType>(int transition_id, int state_id);
        bool connectMarkerToState(int marker_id, int state_id);
        bool connectMarkerToState<StateType>(int marker_id, int state_id);
        bool disconnectMarkerFromState(int marker_id, int state_id);
        bool disconnectMarkerFromState<StateType>(int marker_id, int state_id);
        bool removeMarkersFromState(int state_id);
        bool removeMarkersFromState<T>(int state_id);
        bool removeState(int id);
        bool removeState<T>(int id);
        bool removeTransition(int id);
        bool removeTransition<T>(int id);
        bool removeMarker(int id);
        bool removeMarker<T>(int id);
        bool moveMarker(int marker_id, int new_state_id);
        bool moveMarker<T>(int marker_id, int new_state_id);
        int getStateCount();
        int getStateCount<T>();
        int getTransitionCount();
        int getTransitionCount<T>();
        int getMarkerCount();
        int getMarkerCount<T>();
        T getStateById<T>(int id);
        T getTransitionById<T>(int id);
        T getMarkerById<T>(int id);
        T getState<T>(int index);
        T getTransition<T>(int index);
        T getMarker<T>(int index);
        StateWrapper<T> getStateWrapper<T>(int index);
        TransitionWrapper<T> getTransitionWrapper<T>(int index);
        MarkerWrapper<T> getMarkerWrapper<T>(int index);
        StateWrapper<T> getStateWrapperById<T>(int id);
        TransitionWrapper<T> getTransitionWrapperById<T>(int id);
        MarkerWrapper<T> getMarkerWrapperById<T>(int id);
        void clear();
        void clearStates();
        void clearStates<T>();
        void clearTransitions();
        void clearTransitions<T>();
        void clearMarkers();
        void clearMarkers<T>();
        void clearLinks();
        void moveMarkers();
        void addMoveRule(Type input_state, Type output_state, Type transition, Type marker, int count = 1);
        void addPrevAccumulateRule(Type state, List<Tuple<Type, int>> markers);
        void addPrevAccumulateRule(Type state, Type marker, int count = 1);
        void addNextAccumulateRule(Type state, List<Tuple<Type, int>> markers);
        void addNextAccumulateRule(Type state, Type marker, int count = 1);
        void clearMoveRules();
        void clearPrevAccumulateRules();
        void clearNextAccumulateRules();
        void removeMoveRule(Type input_state, Type output_state, Type transition, Type marker, int count = -1);
        void removePrevAccumulateRule(Type state, List<Tuple<Type, int>> markers);
        void removePrevAccumulateRule(Type state, Type marker, int count = -1);
        void removeNextAccumulateRule(Type state, List<Tuple<Type, int>> markers);
        void removeNextAccumulateRule(Type state, Type marker, int count = -1);
    }
}
